-- <오라클 함수>     : Day3(3/20)

-- 문자열 함수
-- (1) =================================================
-- UPPER() 대문자 변환
-- LOWER() 소문자 변환
-- LENGTH() 문자열 길이
-- SAMPLE
SELECT ENAME
    , upper(ename) AS to_upper_name
    , lower(ename) AS to_lower_name
FROM EMP;
-- 고객은 대문자 / 소문자를 구분하지 않는 경우가 많습니다. 따라서, 이를 대문자든 소문자로 통합해주는 것이 매우 중요합니다.
-- 이는 뭔가 String 값을 비교하는 것도 마찬가지입니다. 아래의 사례처럼 말이죠. 이 개념은 원자성이라는 것과 연결됩니다.
SELECT *
FROM EMP
WHERE upper(ename) = upper('Scott');
-- 빈칸을 날리는 경우는 어떻게 할까요? TRIM  공란을 날려줘야할 필요도 있지요.
-- (2) =================================================
-- TRIM : 공란 제거
SELECT trim(' ___ORACLE _ _ _ ')
FROM dual;
-- 위 처럼 하면 공란이 제거가 되긴 하지만, 하나밖에 사라지지 않습니다.
-- 이 경우에는 공란도 정규 아스키코드가 있으므로 아스키 코드를 사용해보는 것도 팁입니다.
-- CONCAT : 문자열 연결 (더하기)
SELECT EMPNO    -- 7369
        , ENAME -- SMITH
        , concat(empno, ename) -- 이 경우에는 7369SMITH
FROM EMP;
-- (3) =================================================
-- REPLACE : 문자열 교체
-- 주요 예시 : 전화번호, 이메일, 집주소 등등
-- 자료를 깔끔하게 정리해주거나 혹은 개인정보를 보호하려고 이렇게 합니다.
SELECT '010-1234-5678' AS mobile_phone
    , replace('010-1234-5678', '-', '') AS replaced_mobile_phone
-- replace(1,2,3) 1번의 값 중 2번의 내용을 찾아서 3번처럼 바꿔주세요.
FROM dual;
-- (4) =================================================
-- LPAD, RAPD : 문자열을 채워주는 함수   --> TRIM과 대척점에 있는 함수.
-- 이 건 실무에서 왜 쓸까요? 칸을 채우기 위해 씁니다. 통일성을 유지하기 위해서.
-- 혹은 개인정보를 보호하기 위해서 이렇게 하는 경우도 있습니다. 
SELECT lpad('ORA_1234_XE', 20) AS lpad_20
    , rpad('ORA_1234_XE', 20) AS rapd_20
FROM dual;
SELECT lpad('ORA_1234_XE', 20, '*') AS lpad_20
    , rpad('ORA_1234_XE', 20, '*') AS rapd_20
FROM dual;
